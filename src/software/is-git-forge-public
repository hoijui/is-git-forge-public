#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2023 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-only
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"

fail=false
check_github=true
check_gitlab=true
check_gitea=true
check_sourcehut=true

function disable_all_checks() {

	check_github=false
	check_gitlab=false
	check_gitea=false
	check_sourcehut=false
}

function check_only() {
	local forge="$1"

	disable_all_checks

	if [ "$forge" = "github" ]
	then
		check_github=true
	elif [ "$forge" = "gitlab" ]
	then
		check_gitlab=true
	elif [ "$forge" = "gitea" ]
	then
		check_gitea=true
	elif [ "$forge" = "sourcehut" ]
	then
		check_sourcehut=true
	else
		>&2 echo "ERROR: Invalid value for FORGE supplied to -c, --check: '$forge'"
		print_help
		exit 6
	fi
}

function print_help() {

	echo -e "$script_name -"
	echo "Given the URL to a git repository on a known forge site -"
	echo "or at least using a known forge software -"
	echo "returns whether the project is public or not."
	echo "Non-public could be private, internal, unlisted, bad URL,"
	echo "non repo URL, or possibly something else."
	echo
	echo "It does that by downloading the HTML of the Web-UI of the repo,"
	echo "rom which it then extracts the necessary info."
	echo "This info is then presenting it in a uniform way,"
	echo "independent of the forge site, the software it is running,"
	echo "and the actual findings of the evaluation."
	echo
	echo "Why this way, instead of using API(s)?"
	echo "This is much simpler, using a uniform technique for any URL given."
	echo "A simple script, easily extendable to other sites,"
	echo "requiring no tokens or anything else for authentication."
	echo "The downside of course, is that it might be less robust over time,"
	echo "and that it will likely not fail-fast."
	echo
	echo "Supported sites/forge software:"
	echo
	echo "* GitHub"
	echo "* GitLab"
	echo "* Gitea"
	echo "* SourceHut"
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...] <REPO-WEB-URL>"
	echo "Options:"
	echo "  -h, --help              Print this usage help and exits."
	echo "  -f, --fail              Return failure if download returned status 404,"
    echo "                          the URL does not point ot a repos Web-UI,"
    echo "                          or we failed to detect the is-public state for any other reason."
	echo "                          While that might indicate a bad URL,"
	echo "                          it is also the case when trying to access"
	echo "                          a private repo without authentication."
	echo "  -c, --check [FORGE]     Instead of using the checks for all forges,"
	echo "                          use only a specific one."
	echo "                          Supported: 'github', 'gitlab', 'gitea', 'sourcehut'"
	echo "Examples:"
	echo "  $script_name --help"
	echo "  $script_name \"https://github.com/user/repo\""
	echo "  $script_name --check github \"https://github.com/user/repo\""
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		-f|--fail)
			fail=true
			;;
		-c|--check)
			forge="$1"
			shift
			check_only "$forge"
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

function contains() {
	str="$1"

	grep \
		--fixed-strings \
		-e "$str" \
		< "$cached_file" \
		> /dev/null
}

function repo_is_unreachable() {

	echo "false" # is public
	echo "unknown"
	if $fail
	then
		exit 3
	else
		exit 0
	fi
}

function repo_is_public() {

	echo "true" # is public
	echo "public"
	exit 0
}

function repo_is_private() {

	echo "false" # is public
	echo "private"
	exit 0
}

function repo_is_unlisted() {

	echo "false" # is public
	echo "unlisted"
	exit 0
}

function repo_is_unidentifyable() {

	echo "false" # is public
	echo "unidentifyable"
	if $fail
	then
		exit 4
	else
		exit 0
	fi
}

url="${1:-}"
if [ -z "$url" ]
then
	print_help
	>&2 echo "ERROR: Please supply a git repos Web-URL as first argument!"
	exit 1
fi

dler_wget=false
if which wget > /dev/null
then
	dler_wget=true
fi

dler_curl=false
if which curl > /dev/null
then
	dler_curl=true
fi

if ! $dler_wget && ! $dler_curl
then
	>&2 echo "ERROR: Found neither 'wget' nor 'curl'; at least one of them is required!"
	exit 2
fi

tmp_dir="$(mkdir -p "${TMPDIR:-"/tmp"}/$script_name"; mktemp --directory --tmpdir "${script_name}/XXX")"
trap 'rm -rf -- "$tmp_dir"' EXIT

cached_file="$tmp_dir/cached.html"

if $dler_wget
then
	wget \
		--quiet \
		--output-document="$cached_file" \
		"$url" \
		&& dl_status=$? \
		|| dl_status=$? ; true
else
	curl \
		--silent \
		--show-error \
		--fail \
		--output="$cached_file" \
		"$url" \
		&& dl_status=$? \
		|| dl_status=$? ; true
fi

if ! [ "$dl_status" -eq 0 ]
then
	>&2 echo "WARN: Failed fetching the HTML content of URL:"
    >&2 echo "WARN: '$url'"
    >&2 echo "WARN: This could be due to:"
	>&2 echo "WARN: - private repo URL"
	>&2 echo "WARN: - not a repo URL"
	>&2 echo "WARN: - no internet access"
	>&2 echo "WARN: - authentication required"
	>&2 echo "WARN: - mistyped repo URL"
	>&2 echo "WARN: - ..."
	repo_is_unreachable
fi

# From here on, we will see the code
# actually detecting whether a page is a public repos Web-UI.
# It does so based on the samples gathered and documented in:
# * doc/snapshots/private.md
# * doc/snapshots/public.md

if $check_github
then
	if contains '<span class="Label Label--secondary v-align-middle mr-1">Public</span>'
	then
		repo_is_public
	fi
	if contains '<span class="Label Label--secondary v-align-middle mr-1">Private</span>'
	then
		repo_is_private
	fi
fi

if $check_gitlab
then
	if contains '<span class="visibility-icon gl-text-secondary has-tooltip gl-ml-2" data-container="body" title="Public - The project can be accessed without any authentication.">'
	then
		repo_is_public
	fi
	if contains '<span class="visibility-icon gl-text-secondary has-tooltip gl-ml-2" data-container="body" title="Private - Project access must be granted explicitly to each user. If this project is part of a group, access is granted to members of the group.">'
	then
		repo_is_private
	fi
fi

if $check_gitea
then
	if contains ' class="svg octicon-repo" '
	then
		repo_is_public
	fi
	if contains ' class="svg octicon-lock" '
	then
		repo_is_private
	fi
fi

if $check_sourcehut
then
	if contains '<meta content="git" name="vcs"/>'
	then
		# Here we already know, we are (very likely) looking at
		# an actual SourceHut repo page
		# (of yet unknown access level).
		if contains '<li class="nav-item nav-text vis-unlisted" title="This repository is only visible to those who know the URL.">'
		then
			repo_is_unlisted
		fi
		if contains '<li class="nav-item nav-text vis-private" title="This repository is only visible to those who were invited to view it.">'
		then
			repo_is_private
		fi
		repo_is_public
	fi
fi

repo_is_unidentifyable
